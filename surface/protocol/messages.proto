option cc_generic_services = false;
import "google/protobuf/descriptor.proto";

//=============================================================================
// Common Types
//=============================================================================

message CMsgVector
{
	optional float x = 1;
	optional float y = 2;
	optional float z = 3;
}

message CMsgVector2D
{
	optional float x = 1;
	optional float y = 2;
}

message CMsgQAngle
{
	optional float x = 1;
	optional float y = 2;
	optional float z = 3;
}

message CMsgRGBA
{
	optional int32 r = 1;
	optional int32 g = 2;
	optional int32 b = 3;
	optional int32 a = 4;
}

//=============================================================================
// Client messages
//=============================================================================

enum CLC_Messages
{
	clc_Bad						= 0;
	clc_Nop						= 1;
	clc_PacketEntities			= 2;
	clc_DeltaPacketEntities		= 3;
	clc_ClientInfo 				= 8;				// client info (table CRC etc)    
	clc_VoiceData 				= 9;				// Voicestream data from a client   
	clc_Delta					= 10;
	clc_StringCmd				= 11;
	clc_UserInfo				= 12;
	clc_RequestCvarValue		= 13;
}

message CCLCMsg_ClientInfo
{
	optional fixed32 send_table_crc = 1;
	optional uint32 server_count = 2;
	optional bool is_hltv = 3;
	optional bool is_replay = 4;
	optional uint32 friends_id = 5;
	optional string friends_name = 6;
	repeated fixed32 custom_files = 7;
}

message CCLCMsg_VoiceData
{
	optional bytes data = 1;
	optional fixed64 xuid = 2;
}

enum SVC_Messages
{
	svc_Disconnect		= 7;
	svc_serverinfo		= 8;
	svc_SendTable		= 9;
	svc_ClassInfo		= 10;
	svc_VoiceInit		= 11;
	svc_VoiceData		= 12;
	svc_Print			= 13;
	svc_GameEvent		= 14;
	svc_EntityMessage	= 15;
	svc_Time			= 16;
	svc_Delta			= 17;
	svc_GameEvent		= 18;
	svc_PacketEntities	= 19;
	svc_TempEntities	= 20;
	svc_GetCvarValue	= 21;
	svc_UserMessage		= 22;
	svc_DeltaPacketEntities = 23;
	svc_ÑhokeÑount		= 24;
}

message CSVCMsg_ServerInfo
{
	optional int32 protocol = 1;			// protocol version
	optional int32 server_count = 2;		// number of changelevels since server start
	optional bool is_dedicated = 3;  		// dedicated server ?	
	optional bool is_official_jak_server = 4;
	optional bool is_redirecting_to_proxy_relay = 21;	// // Will be redirecting to proxy relay
	optional int32 c_os = 7;				// L = linux, W = Win32
	optional fixed32 map_crc = 8;			// server map CRC
	optional fixed32 client_crc = 9;		// client.dll CRC server is using
	optional int32 max_clients = 11;		// max number of clients on server
	optional int32 max_classes = 12;		// max number of server classes
	optional int32 player_num = 13;		// our client slot number
	optional float tick_interval = 14;		// server tick interval
	optional string game_dir = 15;			// game directory eg "tf2"
	optional string map_name = 16;			// name of current map 
	optional string map_group_name = 17;	// name of current map 
	optional string host_name = 19;			// server name
	optional uint32 public_ip = 20;	
}

message CSVCMsg_ClassInfo
{
	message class_t
	{
		optional int32 class_id = 1;
		optional string data_table_name = 2;
		optional string class_name = 3;
	}

	optional bool create_on_client = 1;	
	repeated class_t classes = 2;
}

message CSVCMsg_SendTable
{
	message sendprop_t
	{
		optional int32 type = 1;				// SendPropType
		optional string var_name = 2;
		optional int32 flags = 3;
		optional int32 priority = 4;
		optional string dt_name = 5;			// if pProp->m_Type == DPT_DataTable || IsExcludeProp
		optional int32 num_elements = 6;		// else if pProp->m_Type == DPT_Array
		optional float low_value = 7;			// else ...
		optional float high_value = 8;			// 		...
		optional int32 num_bits = 9;			//		...
	};

	optional bool is_end = 1;
	optional string net_table_name = 2;
	optional bool needs_decoder = 3;
	repeated sendprop_t props = 4;
}

message CSVCMsg_Print
{
	optional string text = 1;
}

message CSVCMsg_VoiceInit
{
	optional int32 quality = 1;
	optional string codec = 2;
}


message CSVCMsg_VoiceData
{
	optional int32 client = 1;
	optional bool proximity = 2;
	optional fixed64 xuid = 3;
	optional int32 audible_mask = 4; 
	optional bytes voice_data = 5;	
}

message CSVCMsg_GetCvarValue
{
	optional int32 cookie = 1;		// QueryCvarCookie_t
	optional string cvar_name = 2;
}

message CSVCMsg_GameEvent
{
	message key_t
	{
		optional int32 type = 1;			// type
		optional string val_string = 2;		// TYPE_STRING
		optional float val_float = 3;		// TYPE_FLOAT 
		optional int32 val_long = 4;		// TYPE_LONG  
		optional int32 val_short = 5;		// TYPE_SHORT 
		optional int32 val_byte = 6;		// TYPE_BYTE  
		optional bool val_bool = 7;			// TYPE_BOOL  
		optional uint64 val_uint64 = 8;		// TYPE_UINT64
		optional bytes val_wstring = 9;		// TYPE_WSTRING
	}

	optional string event_name = 1;
	optional int32 eventid = 2;
	repeated key_t keys = 3;
}

message CSVCMsg_PacketEntities
{
	optional int32 max_entries = 1;
	optional int32 updated_entries = 2;
	optional bool is_delta = 3;	
	optional bool update_baseline = 4;
	optional int32 baseline = 5;
	optional int32 delta_from = 6;
	optional bytes entity_data = 7;
}

message CSVCMsg_EntityMsg
{
	optional int32 ent_index = 1;
	optional int32 class_id = 2;
	optional bytes ent_data = 3;
}